{"version":3,"sources":["../../../projects/angular-toastify/src/lib/toast.ts","../../../projects/angular-toastify/src/lib/toast-type.ts","../../../projects/angular-toastify/src/lib/toast.service.ts","../../../projects/angular-toastify/src/lib/toastify-toast-container/toastify-toast-container.component.ts","../../../projects/angular-toastify/src/lib/toastify-toast/toastify-toast.component.ts","../../../projects/angular-toastify/src/lib/angular-toastify.module.ts"],"names":["toastIdentitySequence","Toast","message","type","this","time","Date","getTime","id","ToastType","info","success","warning","error","default","ToastService","toastAddedEvent","EventEmitter","dismissAllEvent","prototype","dismissAll","emit","toast","warn","Injectable","args","providedIn","ToastifyToastContainerComponent","_toastService","_cd","transitionDurations","position","transition","autoClose","hideProgressBar","pauseOnHover","pauseOnVisibilityChange","closeOnClick","newestOnTop","iconLibrary","toasts","Array","toastTransitionDict","ngOnChanges","markForCheck","dismiss","_this","TransitionState","exiting","setTimeout","index","indexOf","splice","getClass","base","state","entering","ngOnInit","subscribe","noTransition","unshift","push","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Input","ToastifyToastComponent","_zone","dismissEvent","running","autoCloseRemaining","startTime","handleVisibilityChange","document","visibilityState","startCloseTimer","ngOnDestroy","clearTimerTimeout","autoDismissTimeout","runOutsideAngular","run","pauseCloseTimer","pauseTime","elapsed","undefined","clearTimeout","handleDismissButtonAction","handleHostClick","handleMouseEnter","handleMouseLeave","detectChanges","NgZone","Output","HostListener","NgModule","declarations","imports","BrowserModule","exports"],"mappings":"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","sourcesContent":["import { ToastType } from './toast-type';\n\nlet toastIdentitySequence = 0;\n\nexport class Toast {\n    id: number;\n    message: string;\n    type: ToastType;\n    readonly time: number;\n\n    constructor(message: string, type: ToastType) {\n        this.message = message;\n        this.type = type;\n        this.time = new Date().getTime();\n        this.id = toastIdentitySequence++;\n    }\n}\n","export enum ToastType {\n    info,\n    success,\n    warning,\n    error,\n    default\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { Toast } from './toast';\nimport { ToastType } from './toast-type';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToastService {\n\n  toastAddedEvent = new EventEmitter();\n  constructor() { }\n\n  dismissAllEvent = new EventEmitter();\n\n  dismissAll() {\n    this.dismissAllEvent.emit();\n  }\n\n  info(message: string) {\n    const toast = new Toast(message, ToastType.info);\n    this.toastAddedEvent.emit(toast);\n  }\n\n  success(message: string) {\n    const toast = new Toast(message, ToastType.success);\n    this.toastAddedEvent.emit(toast);\n  }\n\n  warn(message: string) {\n    const toast = new Toast(message, ToastType.warning);\n    this.toastAddedEvent.emit(toast);\n  }\n\n  error(message: string) {\n    const toast = new Toast(message, ToastType.error);\n    this.toastAddedEvent.emit(toast);\n  }\n\n  default(message: string) {\n    const toast = new Toast(message, ToastType.default);\n    this.toastAddedEvent.emit(toast);\n  }\n}\n","import { Component, OnInit, Input, ChangeDetectionStrategy, ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { ToastService } from '../toast.service';\nimport { Toast } from '../toast';\nimport { ToastType } from '../toast-type';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'lib-toastify-toast-container',\n  templateUrl: './toastify-toast-container.component.html',\n  styleUrls: ['./toastify-toast-container.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToastifyToastContainerComponent implements OnInit, OnChanges {\n  private readonly transitionDurations = 400;\n\n  @Input() position: 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left' = 'top-right';\n  @Input() transition: 'bounce' | 'slide' | 'zoom' | 'flip' = 'bounce';\n  @Input() autoClose = 5000;\n  @Input() hideProgressBar = false;\n  @Input() pauseOnHover = true;\n  @Input() pauseOnVisibilityChange = true;\n  @Input() closeOnClick = true;\n  @Input() newestOnTop = false;\n  @Input() iconLibrary: 'material' | 'font-awesome' | 'none' = 'none';\n\n  ToastType = ToastType;\n  toasts = new Array<Toast>();\n  toastTransitionDict = {};\n\n  constructor(private _toastService: ToastService, private _cd: ChangeDetectorRef) { }\n\n  ngOnChanges(): void {\n    this._cd.markForCheck();\n  }\n\n  dismiss(toast: Toast): void {\n    this.toastTransitionDict[toast.id] = TransitionState.exiting;\n    setTimeout(() => {\n      const index = this.toasts.indexOf(toast);\n      this.toasts.splice(index, 1);\n      this._cd.markForCheck();\n    }, this.transitionDurations);\n  }\n\n  getClass(toast: Toast): string {\n    let base = `toast toast--${ToastType[toast.type]} `;\n    const state = this.toastTransitionDict[toast.id];\n    if (state === TransitionState.entering) {\n      base += `${this.transition}-enter ${this.transition}-enter--${this.position}`;\n    } else if (state === TransitionState.exiting) {\n      base += `${this.transition}-exit ${this.transition}-exit--${this.position}`;\n    }\n\n    return base;\n  }\n\n  ngOnInit(): void {\n    this._toastService.dismissAllEvent.subscribe(() => {\n      this.toasts = new Array<Toast>();\n      this._cd.markForCheck();\n    });\n\n    this._toastService.toastAddedEvent.subscribe(toast => {\n      this.toastTransitionDict[toast.id] = TransitionState.entering;\n      setTimeout(() => {\n        this.toastTransitionDict[toast.id] = TransitionState.noTransition;\n        this._cd.markForCheck();\n      }, this.transitionDurations);\n\n      if (this.newestOnTop) {\n        this.toasts.unshift(toast);\n      } else {\n        this.toasts.push(toast);\n      }\n      this._cd.markForCheck();\n    });\n  }\n}\n\nenum TransitionState {\n  entering,\n  noTransition,\n  exiting\n}\n","import {\n  ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, HostListener, Input, NgZone, OnDestroy, OnInit, Output\n} from '@angular/core';\nimport { ToastType } from '../toast-type';\nimport { Toast } from '../toast';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'lib-toastify-toast',\n  templateUrl: './toastify-toast.component.html',\n  styleUrls: ['./toastify-toast.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ToastifyToastComponent implements OnInit, OnDestroy {\n\n  @Input() autoClose = 5000;\n  @Input() hideProgressBar = false;\n  @Input() pauseOnHover = true;\n  @Input() pauseOnVisibilityChange = true;\n  @Input() closeOnClick = true;\n  @Input() toast: Toast;\n  @Input() iconLibrary: 'material' | 'font-awesome' | 'none';\n\n  @Output() dismissEvent = new EventEmitter();\n\n  private autoDismissTimeout: any;\n  private autoCloseRemaining: number;\n\n  private pauseTime: number;\n  private startTime: number;\n\n  ToastType = ToastType;\n  running = false;\n\n  constructor(private _cd: ChangeDetectorRef, private _zone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    this.autoCloseRemaining = this.autoClose;\n    this.startTime = this.toast.time;\n    // Do not start timer when toast is prompted while window is out of focus\n    if (this.handleVisibilityChange && document.visibilityState === 'visible') {\n      this.startCloseTimer();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.clearTimerTimeout();\n  }\n\n  startCloseTimer(): void {\n    if (this.running || !this.autoClose) {\n      return;\n    }\n\n    this.startTime = new Date().getTime();\n    this.running = true;\n    this.autoDismissTimeout = this._zone.runOutsideAngular(() =>\n      setTimeout(() => {\n        this._zone.run(() => {\n          this.dismissEvent.emit();\n          this._cd.markForCheck();\n        });\n      }, this.autoCloseRemaining));\n  }\n\n  pauseCloseTimer(): void {\n    this.running = false;\n    this.clearTimerTimeout();\n\n    // Calculate the elapsed time, subtract remaining time\n    this.pauseTime = new Date().getTime();\n    const elapsed = this.pauseTime - this.startTime;\n    this.autoCloseRemaining -= elapsed;\n  }\n\n  clearTimerTimeout(): void {\n    if (this.autoDismissTimeout !== undefined) {\n      clearTimeout(this.autoDismissTimeout);\n    }\n  }\n\n  handleDismissButtonAction(): void {\n    if (this.closeOnClick) {\n      return; // Let the other event handle the dismissal\n    }\n\n    this.clearTimerTimeout();\n    this.dismissEvent.emit();\n  }\n\n  @HostListener('click')\n  handleHostClick(): void {\n    if (this.closeOnClick) {\n      this.clearTimerTimeout();\n      this.dismissEvent.emit();\n    }\n  }\n\n  @HostListener('mouseenter')\n  handleMouseEnter(): void {\n    if (this.pauseOnHover) {\n      this.pauseCloseTimer();\n    }\n  }\n\n  @HostListener('mouseleave')\n  handleMouseLeave(): void {\n    if (this.pauseOnHover) {\n      this.startCloseTimer();\n    }\n  }\n\n  @HostListener('document:visibilitychange')\n  handleVisibilityChange(): void {\n    if (!this.pauseOnVisibilityChange) {\n      return;\n    }\n\n    if (document.visibilityState !== 'visible') {\n      this.pauseCloseTimer();\n      this._cd.detectChanges();\n    } else {\n      this.startCloseTimer();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ToastifyToastComponent } from './toastify-toast/toastify-toast.component';\nimport { ToastifyToastContainerComponent } from './toastify-toast-container/toastify-toast-container.component';\nimport { BrowserModule } from '@angular/platform-browser';\n\n@NgModule({\n  declarations: [ToastifyToastComponent, ToastifyToastContainerComponent],\n  imports: [BrowserModule],\n  exports: [ToastifyToastContainerComponent]\n})\nexport class AngularToastifyModule { }\n"]}