/**
 * @fileoverview added by tsickle
 * Generated from: lib/toastify-toast/toastify-toast.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, HostListener, Input, NgZone, Output } from '@angular/core';
import { ToastType } from '../toast-type';
import { Toast } from '../toast';
export class ToastifyToastComponent {
    /**
     * @param {?} _cd
     * @param {?} _zone
     */
    constructor(_cd, _zone) {
        this._cd = _cd;
        this._zone = _zone;
        this.autoClose = 5000;
        this.hideProgressBar = false;
        this.pauseOnHover = true;
        this.pauseOnVisibilityChange = true;
        this.closeOnClick = true;
        this.dismissEvent = new EventEmitter();
        this.ToastType = ToastType;
        this.running = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.autoCloseRemaining = this.autoClose;
        this.startTime = this.toast.time;
        // Do not start timer when toast is prompted while window is out of focus
        if (this.handleVisibilityChange && document.visibilityState === 'visible') {
            this.startCloseTimer();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.clearTimerTimeout();
    }
    /**
     * @return {?}
     */
    startCloseTimer() {
        if (this.running || !this.autoClose) {
            return;
        }
        this.startTime = new Date().getTime();
        this.running = true;
        this.autoDismissTimeout = this._zone.runOutsideAngular((/**
         * @return {?}
         */
        () => setTimeout((/**
         * @return {?}
         */
        () => {
            this._zone.run((/**
             * @return {?}
             */
            () => {
                this.dismissEvent.emit();
                this._cd.markForCheck();
            }));
        }), this.autoCloseRemaining)));
    }
    /**
     * @return {?}
     */
    pauseCloseTimer() {
        this.running = false;
        this.clearTimerTimeout();
        // Calculate the elapsed time, subtract remaining time
        this.pauseTime = new Date().getTime();
        /** @type {?} */
        const elapsed = this.pauseTime - this.startTime;
        this.autoCloseRemaining -= elapsed;
    }
    /**
     * @return {?}
     */
    clearTimerTimeout() {
        if (this.autoDismissTimeout !== undefined) {
            clearTimeout(this.autoDismissTimeout);
        }
    }
    /**
     * @return {?}
     */
    handleDismissButtonAction() {
        if (this.closeOnClick) {
            return; // Let the other event handle the dismissal
        }
        this.clearTimerTimeout();
        this.dismissEvent.emit();
    }
    /**
     * @return {?}
     */
    handleHostClick() {
        if (this.closeOnClick) {
            this.clearTimerTimeout();
            this.dismissEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    handleMouseEnter() {
        if (this.pauseOnHover) {
            this.pauseCloseTimer();
        }
    }
    /**
     * @return {?}
     */
    handleMouseLeave() {
        if (this.pauseOnHover) {
            this.startCloseTimer();
        }
    }
    /**
     * @return {?}
     */
    handleVisibilityChange() {
        if (!this.pauseOnVisibilityChange) {
            return;
        }
        if (document.visibilityState !== 'visible') {
            this.pauseCloseTimer();
            this._cd.detectChanges();
        }
        else {
            this.startCloseTimer();
        }
    }
}
ToastifyToastComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'lib-toastify-toast',
                template: "<div role=\"alert\" class=\"toast-body\">\n    <div class=\"icon-container\">\n        <span *ngIf=\"iconLibrary == 'material'\" [ngSwitch]=\"toast.type\">\n            <i class=\"material-icons\" *ngSwitchCase=\"ToastType.info\">info_outline</i>\n            <i class=\"material-icons\" *ngSwitchCase=\"ToastType.default\">info_outline</i>\n            <i class=\"material-icons\" *ngSwitchCase=\"ToastType.warning\">warning_outline</i>\n            <i class=\"material-icons\" *ngSwitchCase=\"ToastType.error\">error_outline</i>\n            <i class=\"material-icons\" *ngSwitchCase=\"ToastType.success\">done</i>\n        </span>\n        <span *ngIf=\"iconLibrary == 'font-awesome'\" [ngSwitch]=\"toast.type\">\n            <i *ngSwitchCase=\"ToastType.info\" class=\"fa fa-info\"></i>\n            <i *ngSwitchCase=\"ToastType.default\" class=\"fa fa-info\"></i>\n            <i *ngSwitchCase=\"ToastType.warning\" class=\"fa fa-exclamation-triangle\"></i>\n            <i *ngSwitchCase=\"ToastType.error\" class=\"fa fa-exclamation\"></i>\n            <i *ngSwitchCase=\"ToastType.success\" class=\"fa fa-check\"></i>\n        </span>\n    </div>\n    <div class=\"toast-container\">\n        <span>{{toast.message}}</span>\n    </div>\n</div>\n<button (click)=\"handleDismissButtonAction()\" class=\"close-button close-button--{{ToastType[toast.type]}}\" type=\"button\" aria-label=\"close\">\u2716</button>\n<div *ngIf=\"!hideProgressBar\" class=\"progress-bar progress-bar--{{ToastType[toast.type]}}\"\n    [style.animation-play-state]=\"running? 'running' : 'paused'\" [style.animation-duration]=\"this.autoClose + 'ms'\" style=\"opacity: 1;\"></div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".toast{border-radius:1px;box-shadow:0 1px 10px 0 rgba(0,0,0,.1),0 2px 15px 0 rgba(0,0,0,.05);box-sizing:border-box;cursor:pointer;direction:ltr;display:flex;font-family:sans-serif;justify-content:space-between;margin-bottom:1rem;max-height:800px;min-height:64px;overflow:hidden;padding:8px;position:relative}.toast--rtl{direction:rtl}.toast--default{background:#fff;color:#aaa}.toast--info{background:#3498db}.toast--success{background:#07bc0c}.toast--warning{background:#f1c40f}.toast--error{background:#e74c3c}.toast-body{flex:1;margin:auto 0}@media only screen and (max-width:480px){.toast{margin-bottom:0}}.close-button{align-self:flex-start;background:transparent;border:none;color:#fff;cursor:pointer;font-size:14px;font-weight:700;opacity:.7;outline:none;padding:0;transition:.3s ease}.close-button--default{color:#000;opacity:.3}.close-button:focus,.close-button:hover{opacity:1}@-webkit-keyframes trackProgress{0%{transform:scaleX(1)}to{transform:scaleX(0)}}@keyframes trackProgress{0%{transform:scaleX(1)}to{transform:scaleX(0)}}.progress-bar{background-color:hsla(0,0%,100%,.7);bottom:0;height:5px;left:0;opacity:.7;position:absolute;transform-origin:left;width:100%;z-index:9999}.progress-bar,.progress-bar--animated{-webkit-animation:trackProgress linear 1 forwards;animation:trackProgress linear 1 forwards}.progress-bar--controlled{transition:transform .2s}.progress-bar--rtl{left:auto;right:0;transform-origin:right}.progress-bar--default{background:linear-gradient(90deg,#4cd964,#5ac8fa,#007aff,#34aadc,#5856d6,#ff2d55)}.icon-container,.toast-body{vertical-align:middle}.icon-container{display:inline-block;width:25px}.icon-container span{display:inline-block;margin-right:.5rem;text-align:center;width:20px}.icon-container span i{vertical-align:middle}.fa,.material-icons{font-size:18px}.toast-container{display:inline-block;vertical-align:middle;width:calc(100% - 25px)}"]
            }] }
];
/** @nocollapse */
ToastifyToastComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone }
];
ToastifyToastComponent.propDecorators = {
    autoClose: [{ type: Input }],
    hideProgressBar: [{ type: Input }],
    pauseOnHover: [{ type: Input }],
    pauseOnVisibilityChange: [{ type: Input }],
    closeOnClick: [{ type: Input }],
    toast: [{ type: Input }],
    iconLibrary: [{ type: Input }],
    dismissEvent: [{ type: Output }],
    handleHostClick: [{ type: HostListener, args: ['click',] }],
    handleMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
    handleMouseLeave: [{ type: HostListener, args: ['mouseleave',] }],
    handleVisibilityChange: [{ type: HostListener, args: ['document:visibilitychange',] }]
};
if (false) {
    /** @type {?} */
    ToastifyToastComponent.prototype.autoClose;
    /** @type {?} */
    ToastifyToastComponent.prototype.hideProgressBar;
    /** @type {?} */
    ToastifyToastComponent.prototype.pauseOnHover;
    /** @type {?} */
    ToastifyToastComponent.prototype.pauseOnVisibilityChange;
    /** @type {?} */
    ToastifyToastComponent.prototype.closeOnClick;
    /** @type {?} */
    ToastifyToastComponent.prototype.toast;
    /** @type {?} */
    ToastifyToastComponent.prototype.iconLibrary;
    /** @type {?} */
    ToastifyToastComponent.prototype.dismissEvent;
    /**
     * @type {?}
     * @private
     */
    ToastifyToastComponent.prototype.autoDismissTimeout;
    /**
     * @type {?}
     * @private
     */
    ToastifyToastComponent.prototype.autoCloseRemaining;
    /**
     * @type {?}
     * @private
     */
    ToastifyToastComponent.prototype.pauseTime;
    /**
     * @type {?}
     * @private
     */
    ToastifyToastComponent.prototype.startTime;
    /** @type {?} */
    ToastifyToastComponent.prototype.ToastType;
    /** @type {?} */
    ToastifyToastComponent.prototype.running;
    /**
     * @type {?}
     * @private
     */
    ToastifyToastComponent.prototype._cd;
    /**
     * @type {?}
     * @private
     */
    ToastifyToastComponent.prototype._zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3RpZnktdG9hc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci10b2FzdGlmeS9zcmMvbGliL3RvYXN0aWZ5LXRvYXN0L3RvYXN0aWZ5LXRvYXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFxQixNQUFNLEVBQzVILE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQVNqQyxNQUFNLE9BQU8sc0JBQXNCOzs7OztJQXFCakMsWUFBb0IsR0FBc0IsRUFBVSxLQUFhO1FBQTdDLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQW5CeEQsY0FBUyxHQUFHLElBQUksQ0FBQztRQUNqQixvQkFBZSxHQUFHLEtBQUssQ0FBQztRQUN4QixpQkFBWSxHQUFHLElBQUksQ0FBQztRQUNwQiw0QkFBdUIsR0FBRyxJQUFJLENBQUM7UUFDL0IsaUJBQVksR0FBRyxJQUFJLENBQUM7UUFJbkIsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBUTVDLGNBQVMsR0FBRyxTQUFTLENBQUM7UUFDdEIsWUFBTyxHQUFHLEtBQUssQ0FBQztJQUdoQixDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDakMseUVBQXlFO1FBQ3pFLElBQUksSUFBSSxDQUFDLHNCQUFzQixJ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QUFNOzthQUNoRDs7OztZQVgwQixpQkFBaUI7WUFBZ0QsTUFBTTs7O3dCQWMvRixLQUFLOzhCQUNMLEtBQUs7MkJBQ0wsS0FBSztzQ0FDTCxLQUFLOzJCQUNMLEtBQUs7b0JBQ0wsS0FBSzswQkFDTCxLQUFLOzJCQUVMLE1BQU07OEJBb0VOLFlBQVksU0FBQyxPQUFPOytCQVFwQixZQUFZLFNBQUMsWUFBWTsrQkFPekIsWUFBWSxTQUFDLFlBQVk7cUNBT3pCLFlBQVksU0FBQywyQkFBMkI7Ozs7SUFsR3pDLDJDQUEwQjs7SUFDMUIsaURBQWlDOztJQUNqQyw4Q0FBNkI7O0lBQzdCLHlEQUF3Qzs7SUFDeEMsOENBQTZCOztJQUM3Qix1Q0FBc0I7O0lBQ3RCLDZDQUEyRDs7SUFFM0QsOENBQTRDOzs7OztJQUU1QyxvREFBZ0M7Ozs7O0lBQ2hDLG9EQUFtQzs7Ozs7SUFFbkMsMkNBQTBCOzs7OztJQUMxQiwyQ0FBMEI7O0lBRTFCLDJDQUFzQjs7SUFDdEIseUNBQWdCOzs7OztJQUVKLHFDQUE4Qjs7Ozs7SUFBRSx1Q0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIElucHV0LCBOZ1pvbmUsIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUb2FzdFR5cGUgfSBmcm9tICcuLi90b2FzdC10eXBlJztcbmltcG9ydCB7IFRvYXN0IH0gZnJvbSAnLi4vdG9hc3QnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ2xpYi10b2FzdGlmeS10b2FzdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90b2FzdGlmeS10b2FzdC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RvYXN0aWZ5LXRvYXN0LmNvbXBvbmVudC5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFRvYXN0aWZ5VG9hc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgYXV0b0Nsb3NlID0gNTAwMDtcbiAgQElucHV0KCkgaGlkZVByb2dyZXNzQmFyID0gZmFsc2U7XG4gIEBJbnB1dCgpIHBhdXNlT25Ib3ZlciA9IHRydWU7XG4gIEBJbnB1dCgpIHBhdXNlT25WaXNpYmlsaXR5Q2hhbmdlID0gdHJ1ZTtcbiAgQElucHV0KCkgY2xvc2VPbkNsaWNrID0gdHJ1ZTtcbiAgQElucHV0KCkgdG9hc3Q6IFRvYXN0O1xuICBASW5wdXQoKSBpY29uTGlicmFyeTogJ21hdGVyaWFsJyB8ICdmb250LWF3ZXNvbWUnIHwgJ25vbmUnO1xuXG4gIEBPdXRwdXQoKSBkaXNtaXNzRXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcHJpdmF0ZSBhdXRvRGlzbWlzc1RpbWVvdXQ6IGFueTtcbiAgcHJpdmF0ZSBhdXRvQ2xvc2VSZW1haW5pbmc6IG51bWJlcjtcblxuICBwcml2YXRlIHBhdXNlVGltZTogbnVtYmVyO1xuICBwcml2YXRlIHN0YXJ0VGltZTogbnVtYmVyO1xuXG4gIFRvYXN0VHlwZSA9IFRvYXN0VHlwZTtcbiAgcnVubmluZyA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NkOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJpdmF0ZSBfem9uZTogTmdab25lKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmF1dG9DbG9zZVJlbWFpbmluZyA9IHRoaXMuYXV0b0Nsb3NlO1xuICAgIHRoaXMuc3RhcnRUaW1lID0gdGhpcy50b2FzdC50aW1lO1xuICAgIC8vIERvIG5vdCBzdGFydCB0aW1lciB3aGVuIHRvYXN0IGlzIHByb21wdGVkIHdoaWxlIHdpbmRvdyBpcyBvdXQgb2YgZm9jdXNcbiAgICBpZiAodGhpcy5oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlICYmIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ3Zpc2libGUnKSB7XG4gICAgICB0aGlzLnN0YXJ0Q2xvc2VUaW1lcigpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuY2xlYXJUaW1lclRpbWVvdXQoKTtcbiAgfVxuXG4gIHN0YXJ0Q2xvc2VUaW1lcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5ydW5uaW5nIHx8ICF0aGlzLmF1dG9DbG9zZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICB0aGlzLmF1dG9EaXNtaXNzVGltZW91dCA9IHRoaXMuX3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLl96b25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5kaXNtaXNzRXZlbnQuZW1pdCgpO1xuICAgICAgICAgIHRoaXMuX2NkLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIHRoaXMuYXV0b0Nsb3NlUmVtYWluaW5nKSk7XG4gIH1cblxuICBwYXVzZUNsb3NlVGltZXIoKTogdm9pZCB7XG4gICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgdGhpcy5jbGVhclRpbWVyVGltZW91dCgpO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBlbGFwc2VkIHRpbWUsIHN1YnRyYWN0IHJlbWFpbmluZyB0aW1lXG4gICAgdGhpcy5wYXVzZVRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBjb25zdCBlbGFwc2VkID0gdGhpcy5wYXVzZVRpbWUgLSB0aGlzLnN0YXJ0VGltZTtcbiAgICB0aGlzLmF1dG9DbG9zZVJlbWFpbmluZyAtPSBlbGFwc2VkO1xuICB9XG5cbiAgY2xlYXJUaW1lclRpbWVvdXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYXV0b0Rpc21pc3NUaW1lb3V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmF1dG9EaXNtaXNzVGltZW91dCk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlRGlzbWlzc0J1dHRvbkFjdGlvbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgIHJldHVybjsgLy8gTGV0IHRoZSBvdGhlciBldmVudCBoYW5kbGUgdGhlIGRpc21pc3NhbFxuICAgIH1cblxuICAgIHRoaXMuY2xlYXJUaW1lclRpbWVvdXQoKTtcbiAgICB0aGlzLmRpc21pc3NFdmVudC5lbWl0KCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIGhhbmRsZUhvc3RDbGljaygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgIHRoaXMuY2xlYXJUaW1lclRpbWVvdXQoKTtcbiAgICAgIHRoaXMuZGlzbWlzc0V2ZW50LmVtaXQoKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdtb3VzZWVudGVyJylcbiAgaGFuZGxlTW91c2VFbnRlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5wYXVzZU9uSG92ZXIpIHtcbiAgICAgIHRoaXMucGF1c2VDbG9zZVRpbWVyKCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2VsZWF2ZScpXG4gIGhhbmRsZU1vdXNlTGVhdmUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMucGF1c2VPbkhvdmVyKSB7XG4gICAgICB0aGlzLnN0YXJ0Q2xvc2VUaW1lcigpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OnZpc2liaWxpdHljaGFuZ2UnKVxuICBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5wYXVzZU9uVmlzaWJpbGl0eUNoYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgIT09ICd2aXNpYmxlJykge1xuICAgICAgdGhpcy5wYXVzZUNsb3NlVGltZXIoKTtcbiAgICAgIHRoaXMuX2NkLmRldGVjdENoYW5nZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFydENsb3NlVGltZXIoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==