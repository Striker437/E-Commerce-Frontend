/**
 * @fileoverview added by tsickle
 * Generated from: lib/toast.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
import { Toast } from './toast';
import { ToastType } from './toast-type';
import * as i0 from "@angular/core";
export class ToastService {
    constructor() {
        this.toastAddedEvent = new EventEmitter();
        this.dismissAllEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    dismissAll() {
        this.dismissAllEvent.emit();
    }
    /**
     * @param {?} message
     * @return {?}
     */
    info(message) {
        /** @type {?} */
        const toast = new Toast(message, ToastType.info);
        this.toastAddedEvent.emit(toast);
    }
    /**
     * @param {?} message
     * @return {?}
     */
    success(message) {
        /** @type {?} */
        const toast = new Toast(message, ToastType.success);
        this.toastAddedEvent.emit(toast);
    }
    /**
     * @param {?} message
     * @return {?}
     */
    warn(message) {
        /** @type {?} */
        const toast = new Toast(message, ToastType.warning);
        this.toastAddedEvent.emit(toast);
    }
    /**
     * @param {?} message
     * @return {?}
     */
    error(message) {
        /** @type {?} */
        const toast = new Toast(message, ToastType.error);
        this.toastAddedEvent.emit(toast);
    }
    /**
     * @param {?} message
     * @return {?}
     */
    default(message) {
        /** @type {?} */
        const toast = new Toast(message, ToastType.default);
        this.toastAddedEvent.emit(toast);
    }
}
ToastService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ToastService.ctorParameters = () => [];
/** @nocollapse */ ToastService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ToastService_Factory() { return new ToastService(); }, token: ToastService, providedIn: "root" });
if (false) {
    /** @type {?} */
    ToastService.prototype.toastAddedEvent;
    /** @type {?} */
    ToastService.prototype.dismissAllEvent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItdG9hc3RpZnkvc3JjL2xpYi90b2FzdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDOztBQUt6QyxNQUFNLE9BQU8sWUFBWTtJQUd2QjtRQURBLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUdyQyxvQkFBZSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFGckIsQ0FBQzs7OztJQUlqQixVQUFVO1FBQ1IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5QixDQUFDOzs7OztJQUVELElBQUksQ0FBQyxPQUFlOztjQUNaLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQztRQUNoRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7OztJQUVELE9BQU8sQ0FBQyxPQUFlOztjQUNmLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQztRQUNuRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7OztJQUVELElBQUksQ0FBQyxPQUFlOztjQUNaLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQztRQUNuRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7OztJQUVELEtBQUssQ0FBQyxPQUFlOztjQUNiLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQztRQUNqRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7OztJQUVELE9BQU8sQ0FBQyxPQUFlOztjQUNmLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQztRQUNuRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7WUFyQ0YsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7Ozs7O0lBR0MsdUNBQXFDOztJQUdyQyx1Q0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRvYXN0IH0gZnJvbSAnLi90b2FzdCc7XG5pbXBvcnQgeyBUb2FzdFR5cGUgfSBmcm9tICcuL3RvYXN0LXR5cGUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBUb2FzdFNlcnZpY2Uge1xuXG4gIHRvYXN0QWRkZWRFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBkaXNtaXNzQWxsRXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgZGlzbWlzc0FsbCgpIHtcbiAgICB0aGlzLmRpc21pc3NBbGxFdmVudC5lbWl0KCk7XG4gIH1cblxuICBpbmZvKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIGNvbnN0IHRvYXN0ID0gbmV3IFRvYXN0KG1lc3NhZ2UsIFRvYXN0VHlwZS5pbmZvKTtcbiAgICB0aGlzLnRvYXN0QWRkZWRFdmVudC5lbWl0KHRvYXN0KTtcbiAgfVxuXG4gIHN1Y2Nlc3MobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgY29uc3QgdG9hc3QgPSBuZXcgVG9hc3QobWVzc2FnZSwgVG9hc3RUeXBlLnN1Y2Nlc3MpO1xuICAgIHRoaXMudG9hc3RBZGRlZEV2ZW50LmVtaXQodG9hc3QpO1xuICB9XG5cbiAgd2FybihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBjb25zdCB0b2FzdCA9IG5ldyBUb2FzdChtZXNzYWdlLCBUb2FzdFR5cGUud2FybmluZyk7XG4gICAgdGhpcy50b2FzdEFkZGVkRXZlbnQuZW1pdCh0b2FzdCk7XG4gIH1cblxuICBlcnJvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBjb25zdCB0b2FzdCA9IG5ldyBUb2FzdChtZXNzYWdlLCBUb2FzdFR5cGUuZXJyb3IpO1xuICAgIHRoaXMudG9hc3RBZGRlZEV2ZW50LmVtaXQodG9hc3QpO1xuICB9XG5cbiAgZGVmYXVsdChtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBjb25zdCB0b2FzdCA9IG5ldyBUb2FzdChtZXNzYWdlLCBUb2FzdFR5cGUuZGVmYXVsdCk7XG4gICAgdGhpcy50b2FzdEFkZGVkRXZlbnQuZW1pdCh0b2FzdCk7XG4gIH1cbn1cbiJdfQ==